# 3 "Lexer.mll"
                 
                open Parser;;
                open String;;
                open List;;
                open Array;;

		(*the spliting function for the string*)
		let rec joint s =
		match s with
			| [] -> ""
			| ""::t->joint t
			| h::t -> h^(joint t);;

		(*the convert function for the string*)	
		let convert s =
			let s1 = ref s in
			let l1 = ref (split_on_char ' ' s) in 
			s1 := joint !l1;
			l1 := split_on_char '[' !s1;
			s1 := joint !l1;
			l1 := split_on_char ']' !s1;
			s1 := joint !l1;
                        l1 := split_on_char '(' !s1;
                        s1 := joint !l1;
                        l1 := split_on_char ')' !s1;
                        s1 := joint !l1;
			l1 := split_on_char ':' !s1;
			begin match !l1 with
				| x::y::z -> s1 := x^","^y;
				| _ -> (); end; 
			l1 := split_on_char ',' !s1;
			let ans = List.map int_of_string !l1 in
                        of_list ans;;

                let convert2 s =
                        let s1 = ref s in
                        let l1 = ref (split_on_char ' ' s) in
                        s1 := joint !l1;
                        l1 := split_on_char '[' !s1;
                        s1 := joint !l1;
                        l1 := split_on_char ']' !s1;
                        s1 := joint !l1;
                        l1 := split_on_char ',' !s1;
                        let ans = List.map int_of_string !l1 in
                        of_list ans;;

# 49 "Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\224\255\225\255\000\000\001\000\000\000\001\000\000\000\
    \001\000\046\000\000\000\056\000\246\255\247\255\248\255\249\255\
    \000\000\252\255\082\000\028\000\092\000\030\000\118\000\003\000\
    \128\000\154\000\032\000\005\000\038\000\164\000\209\000\040\000\
    \219\000\245\000\058\000\001\000\255\255\003\001\044\000\016\001\
    \042\001\052\001\094\000\254\255\250\255\174\000\230\000\002\000\
    \167\000\002\000\029\000\031\000\055\000\000\000\029\000\244\255\
    \241\255\041\000\238\255\000\000\235\255\037\000\039\000\232\255\
    \076\000\049\000\171\000\074\000\068\000\070\000\091\000\079\000\
    \070\000\243\255\240\255\082\000\237\255\004\000\234\255\078\000\
    \081\000\231\255\104\000\230\255\113\000\112\000\103\000\242\255\
    \239\255\108\000\227\255\169\000\109\000\236\255\226\255\126\000\
    \124\000\233\255\229\255\111\000\228\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\002\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\002\000\000\000\000\000\002\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\035\000\000\000\023\000\000\000\027\000\000\000\000\000\
    \019\000\017\000\036\000\011\000\014\000\011\000\045\000\024\000\
    \010\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\016\000\013\000\021\000\044\000\021\000\028\000\
    \026\000\004\000\086\000\007\000\003\000\095\000\028\000\060\000\
    \031\000\099\000\085\000\078\000\038\000\006\000\056\000\064\000\
    \047\000\061\000\008\000\005\000\032\000\091\000\084\000\096\000\
    \040\000\048\000\034\000\018\000\045\000\015\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \010\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\039\000\059\000\057\000\055\000\058\000\020\000\
    \054\000\020\000\062\000\063\000\020\000\027\000\042\000\082\000\
    \053\000\029\000\038\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\023\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\023\000\035\000\
    \066\000\079\000\077\000\075\000\072\000\074\000\073\000\076\000\
    \024\000\065\000\024\000\080\000\071\000\081\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \026\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\026\000\043\000\083\000\089\000\088\000\087\000\
    \090\000\094\000\098\000\097\000\029\000\100\000\000\000\000\000\
    \000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\031\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\046\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \050\000\000\000\049\000\092\000\068\000\000\000\067\000\000\000\
    \000\000\031\000\000\000\000\000\052\000\000\000\093\000\027\000\
    \070\000\000\000\051\000\032\000\000\000\032\000\069\000\000\000\
    \001\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\034\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\034\000\046\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \000\000\000\000\000\000\038\000\000\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\040\000\
    \039\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
    \038\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\035\000\000\000\042\000\000\000\000\000\000\000\
    \000\000\000\000\042\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\035\000\255\255\023\000\255\255\027\000\255\255\255\255\
    \000\000\000\000\035\000\000\000\000\000\000\000\010\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\016\000\021\000\027\000\
    \026\000\000\000\006\000\000\000\000\000\004\000\028\000\059\000\
    \031\000\003\000\006\000\077\000\038\000\000\000\053\000\007\000\
    \008\000\049\000\000\000\000\000\031\000\005\000\006\000\004\000\
    \038\000\047\000\034\000\000\000\009\000\000\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\018\000\050\000\051\000\054\000\057\000\019\000\
    \052\000\021\000\061\000\062\000\020\000\026\000\042\000\065\000\
    \052\000\028\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\022\000\034\000\
    \064\000\067\000\068\000\069\000\070\000\071\000\072\000\075\000\
    \024\000\064\000\022\000\079\000\070\000\080\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\025\000\042\000\082\000\084\000\085\000\086\000\
    \089\000\092\000\095\000\096\000\029\000\099\000\255\255\255\255\
    \255\255\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \048\000\255\255\048\000\091\000\066\000\255\255\066\000\255\255\
    \255\255\030\000\255\255\255\255\048\000\255\255\091\000\025\000\
    \066\000\255\255\048\000\032\000\255\255\030\000\066\000\255\255\
    \000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\033\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \255\255\255\255\255\255\037\000\255\255\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\037\000\
    \039\000\255\255\255\255\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\255\255\255\255\255\255\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\040\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\033\000\255\255\041\000\255\255\255\255\255\255\
    \255\255\255\255\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\041\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec tokens lexbuf =
   __ocaml_lex_tokens_rec lexbuf 0
and __ocaml_lex_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 60 "Lexer.mll"
                                                         c
# 259 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 60 "Lexer.mll"
                                                                                (RANGES (convert c))
# 263 "Lexer.ml"

  | 1 ->
let
# 61 "Lexer.mll"
                                                         c
# 269 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 61 "Lexer.mll"
                                                                                (INDICES (convert2 c))
# 273 "Lexer.ml"

  | 2 ->
# 62 "Lexer.mll"
                                                                                (OPEN_PARENTHESIS)
# 278 "Lexer.ml"

  | 3 ->
# 63 "Lexer.mll"
                                                                                (CLOSED_PARENTHESIS)
# 283 "Lexer.ml"

  | 4 ->
# 64 "Lexer.mll"
                                                                                (OPEN_BRACKET)
# 288 "Lexer.ml"

  | 5 ->
# 65 "Lexer.mll"
                                                                                (ASSIGN)
# 293 "Lexer.ml"

  | 6 ->
# 66 "Lexer.mll"
                                                                                (CLOSE_BRACKET)
# 298 "Lexer.ml"

  | 7 ->
# 67 "Lexer.mll"
                                                                                (COMMA)
# 303 "Lexer.ml"

  | 8 ->
# 68 "Lexer.mll"
                                                                                (SEMICOL)
# 308 "Lexer.ml"

  | 9 ->
# 69 "Lexer.mll"
                                                                                (tokens lexbuf)
# 313 "Lexer.ml"

  | 10 ->
let
# 70 "Lexer.mll"
                                                                        n
# 319 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "Lexer.mll"
                                                                                (NUM (float_of_string n))
# 323 "Lexer.ml"

  | 11 ->
# 71 "Lexer.mll"
                                                                                (ROWMAX)
# 328 "Lexer.ml"

  | 12 ->
# 72 "Lexer.mll"
                                                                                (COLMAX)
# 333 "Lexer.ml"

  | 13 ->
# 73 "Lexer.mll"
                                                                                (MAX)
# 338 "Lexer.ml"

  | 14 ->
# 74 "Lexer.mll"
                                                                                (ROWMIN)
# 343 "Lexer.ml"

  | 15 ->
# 75 "Lexer.mll"
                                                                                (COLMIN)
# 348 "Lexer.ml"

  | 16 ->
# 76 "Lexer.mll"
                                                                                (MIN)
# 353 "Lexer.ml"

  | 17 ->
# 77 "Lexer.mll"
                                                                                (ROWSUM)
# 358 "Lexer.ml"

  | 18 ->
# 78 "Lexer.mll"
                                                                                (COLSUM)
# 363 "Lexer.ml"

  | 19 ->
# 79 "Lexer.mll"
                                                                                (SUM)
# 368 "Lexer.ml"

  | 20 ->
# 80 "Lexer.mll"
                                                                                (ROWAVG)
# 373 "Lexer.ml"

  | 21 ->
# 81 "Lexer.mll"
                                                                                (COLAVG)
# 378 "Lexer.ml"

  | 22 ->
# 82 "Lexer.mll"
                                                                                (AVG)
# 383 "Lexer.ml"

  | 23 ->
# 83 "Lexer.mll"
                                                                                (ROWCOUNT)
# 388 "Lexer.ml"

  | 24 ->
# 84 "Lexer.mll"
                                                                                (COLCOUNT)
# 393 "Lexer.ml"

  | 25 ->
# 85 "Lexer.mll"
                                                                                (COUNT)
# 398 "Lexer.ml"

  | 26 ->
# 86 "Lexer.mll"
                                                                                (ADD)
# 403 "Lexer.ml"

  | 27 ->
# 87 "Lexer.mll"
                                                                                (DIV)
# 408 "Lexer.ml"

  | 28 ->
# 88 "Lexer.mll"
                                                                                (MULT)
# 413 "Lexer.ml"

  | 29 ->
# 89 "Lexer.mll"
                                                                                (SUBT)
# 418 "Lexer.ml"

  | 30 ->
# 90 "Lexer.mll"
                                                                                     (NEWLINE)
# 423 "Lexer.ml"

  | 31 ->
# 91 "Lexer.mll"
                                                                                (raise End_of_file)
# 428 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_tokens_rec lexbuf __ocaml_lex_state

;;

